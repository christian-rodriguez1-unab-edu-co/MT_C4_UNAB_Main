# Use the latest 2.1 version of CircleCI pipeline process engine.
version: 2.1

# Define a job to be invoked later in a workflow.
# See: https://circleci.com/docs/2.0/configuration-reference/#jobs
jobs:
  IaaC-OCI:
    # Specify the execution environment. You can specify an image from Dockerhub or use one of our Convenience Images from CircleCI's Developer Hub.
    # See: https://circleci.com/docs/2.0/configuration-reference/#docker-machine-macos-windows-executor
    docker:
      - image: docker.mirror.hashicorp.services/hashicorp/terraform:light
    # set resource class
    resource_class: small
    # Add steps to the job
    # See: https://circleci.com/docs/2.0/configuration-reference/#steps
    steps:
      - checkout
      - run:
          name: create terraform-states_bucket_credentials
          command: |
            echo "[default]" >> terraform-states_bucket_credentials
            echo "aws_access_key_id=$aws_access_key_id" >> terraform-states_bucket_credentials
            echo "aws_secret_access_key=$aws_secret_access_key" >> terraform-states_bucket_credentials
            cat terraform-states_bucket_credentials
          working_directory: ~/project/tf_trasversal/
#      - run:
#          name: "create oracleidentitycloudservice_christian.rodriguez.mt-12-08-20-39.pem"
#          command: |
#            cd ~/project/tf_trasversal/
#            set -x
#            echo "$private_key" >> oracleidentitycloudservice_christian.rodriguez.mt-12-08-20-39.pem
#            cat oracleidentitycloudservice_christian.rodriguez.mt-12-08-20-39.pem
      - run:
          name: create terrafom.tfvars
          command: |
            echo "#Provider OCI" >> terraform.tfvars
            echo "tenancy_ocid=$tenancy_ocid" >> terraform.tfvars
            echo "user_ocid=$user_ocid" >> terraform.tfvars
            echo "fingerprint=$fingerprint" >> terraform.tfvars
            echo "compartment_ocid=$compartment_ocid" >> terraform.tfvars
            echo "region=$region" >> terraform.tfvars
            echo "private_key_path=$private_key_path" >> terraform.tfvars
            echo "namespace=$namespace" >> terraform.tfvars
            echo "#Provider CircleCI" >> terraform.tfvars
            echo "api_token=$api_token" >> terraform.tfvars
            echo "organization=$organization" >> terraform.tfvars
            echo "CIRCLE_PROJECT_REPONAME=$CIRCLE_PROJECT_REPONAME" >> terraform.tfvars
            cat terraform.tfvars
          working_directory: ~/project/tf_trasversal/
      - run:
          name: terraform init, plan, apply
          command: |
            terraform init -input=false
            terraform plan -out tfapply -var-file terraform.tfvars
            terraform apply -auto-approve tfapply 
          working_directory: ~/project/tf_trasversal/     
  BulidApp:
    docker:
      - image: cimg/go:1.17
#        auth:
#          username: mydockerhub-user
#          password: $DOCKERHUB_PASSWORD  # context / project UI env-var reference
    # set resource class
    resource_class: small
    steps:
      - checkout
      # ... steps for building/testing app ...

      - setup_remote_docker:
          version: 20.10.14
          docker_layer_caching: true

      # build and push Docker image
      - run: |
          docker build -t "Repo_$CIRCLE_PROJECT_REPONAME":$tag .
          echo $registry_pass | docker login -u $registry_user --password-stdin
          docker push $region.ocir.io/$namespace/Repo_$CIRCLE_PROJECT_REPONAME:$tag
#          docker push CircleCI-Public/circleci-demo-docker:$TAG
        working_directory: ~/project/tf_main/  

# Invoke jobs via workflows
# See: https://circleci.com/docs/2.0/configuration-reference/#workflows
workflows:
  my-workflow:
    jobs:
#      - IaaC-OCI:
#          context: 
#            - tf-def
      - BuildApp
          context: 
            - oci-resources 