# Use the latest 2.1 version of CircleCI pipeline process engine.
version: 2.1

# Define a job to be invoked later in a workflow.
# See: https://circleci.com/docs/2.0/configuration-reference/#jobs
jobs:
  IaaC-OCI:
    # Specify the execution environment. You can specify an image from Dockerhub or use one of our Convenience Images from CircleCI's Developer Hub.
    # See: https://circleci.com/docs/2.0/configuration-reference/#docker-machine-macos-windows-executor
    docker:
      - image: docker.mirror.hashicorp.services/hashicorp/terraform:light
    # set resource class
    resource_class: small
    # Add steps to the job
    # See: https://circleci.com/docs/2.0/configuration-reference/#steps
    steps:
      - checkout
      - run:
          name: create terraform-states_bucket_credentials
          command: |
            echo "[default]" >> terraform-states_bucket_credentials
            echo "aws_access_key_id=$aws_access_key_id" >> terraform-states_bucket_credentials
            echo "aws_secret_access_key=$aws_secret_access_key" >> terraform-states_bucket_credentials
            cat terraform-states_bucket_credentials
          working_directory: ~/project/tf_trasversal/
      - run:
          name: create terrafom.tfvars
          command: |
            echo "#Provider OCI" >> terraform.tfvars
            echo "tenancy_ocid=$tenancy_ocid" >> terraform.tfvars
            echo "user_ocid=$user_ocid" >> terraform.tfvars
            echo "fingerprint=$fingerprint" >> terraform.tfvars
            echo "compartment_ocid=$compartment_ocid" >> terraform.tfvars
            echo "region=$region" >> terraform.tfvars
            echo "private_key_path=$private_key_path" >> terraform.tfvars
            echo "namespace=$namespace" >> terraform.tfvars
            echo "#Provider CircleCI" >> terraform.tfvars
            echo "api_token=$api_token" >> terraform.tfvars
            echo "organization=$organization" >> terraform.tfvars
            echo "modules=[\"Main\", \"Usuarios\", \"Deportes\", \"Eventos\", \"Equipos\", \"Marcadores\"]" >> terraform.tfvars
            cat terraform.tfvars
          working_directory: ~/project/tf_trasversal/
      - run:
          name: terraform init, plan, apply
          command: |
            terraform init -input=false
            terraform plan -out tfapply -var-file terraform.tfvars
            terraform apply -auto-approve tfapply 
          working_directory: ~/project/tf_trasversal/     
  BuildApp:
    docker:
      - image: cimg/go:1.17
    # set resource class
    resource_class: small
    steps:
      - checkout
      # ... steps for building/testing app ...

      - setup_remote_docker:
          version: 20.10.14
          docker_layer_caching: true

      # build and push Docker image
      - run:
          name: Docker Build & Push
          command: |
            mkdir ./module
            cp ../module/* ./module/
            echo $registry_pass | docker login $region.ocir.io -u $registry_user --password-stdin
            repo="Repo_$CIRCLE_PROJECT_REPONAME"
            docker build -t $region.ocir.io/$namespace/${!repo}:$tag .
            docker push $region.ocir.io/$namespace/${!repo}:$tag
#          docker push CircleCI-Public/circleci-demo-docker:$TAG
          working_directory: ~/project/tf_main/  
  DeployFn:
    # Specify the execution environment. You can specify an image from Dockerhub or use one of our Convenience Images from CircleCI's Developer Hub.
    # See: https://circleci.com/docs/2.0/configuration-reference/#docker-machine-macos-windows-executor
    docker:
      - image: docker.mirror.hashicorp.services/hashicorp/terraform:light
    # set resource class
    resource_class: small
    # Add steps to the job
    # See: https://circleci.com/docs/2.0/configuration-reference/#steps
    steps:
      - checkout
      - run:
          name: create terraform-states_bucket_credentials
          command: |
            echo "[default]" >> terraform-states_bucket_credentials
            echo "aws_access_key_id=$aws_access_key_id" >> terraform-states_bucket_credentials
            echo "aws_secret_access_key=$aws_secret_access_key" >> terraform-states_bucket_credentials
            cat terraform-states_bucket_credentials
          working_directory: ~/project/tf_main/
      - run:
          name: create terrafom.tfvars
          command: |
            echo "#Provider OCI" >> terraform.tfvars
            echo "region=\"$region\"" >> terraform.tfvars
            echo "tenancy_ocid=$tenancy_ocid" >> terraform.tfvars
            echo "user_ocid=$user_ocid" >> terraform.tfvars
            echo "fingerprint=$fingerprint" >> terraform.tfvars
            echo "application_id=\"$application_id\"" >> terraform.tfvars
            echo "private_key_path = \"oracleidentitycloudservice_christian.rodriguez.mt-12-08-20-39.pem\"" >> terraform.tfvars
            repo="Repo_$CIRCLE_PROJECT_REPONAME"
            repo=$(eval echo \$$repo)
            echo "module=\"${repo}\"" >> terraform.tfvars
            echo "function_image=\"$region.ocir.io/$namespace/${repo}:$tag\"" >> terraform.tfvars
            echo "#Provider CircleCI" >> terraform.tfvars
            echo "api_token=$api_token" >> terraform.tfvars
            echo "organization=$organization" >> terraform.tfvars
            pwd
            cat terraform.tfvars
          working_directory: ~/project/tf_main/
      - run:
          name: terraform init, plan, apply
          command: |
            pwd
            terraform init -input=false
            terraform plan -out tfapply -var-file terraform.tfvars
            terraform apply -auto-approve tfapply 
          working_directory: ~/project/tf_main/     
# Invoke jobs via workflows
# See: https://circleci.com/docs/2.0/configuration-reference/#workflows
workflows:
  my-workflow:
    jobs:
#      - IaaC-OCI:
#          context: 
#            - tf-def
#      - BuildApp:
#          context: 
#            - oci-resources
#          requires:
#            - IaaC-OCI
      - DeployFn:
          context:
            - tf-def
            - oci-resources
            - endpoints
#          requires:
#            - BuildApp